{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    # copy list and sort it\n    sorted_numbers = numbers.copy()\n    sorted_numbers.sort()\n\n    # for each pair of neighbouring numbers check the absolute difference\n    for i in range(len(sorted_numbers) - 1):\n        \n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n            return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group_start = 0\n    braces_counter = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            braces_counter += 1\n        else:\n            braces_counter -= 1\n        if braces_counter == 0:\n            groups.append(paren_string[group_start:i+1])\n            group_start = i+1\n    return groups", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    interspersed_list = []\n    for i in numbers:\n        interspersed_list.extend([i, delimeter])\n    return interspersed_list[:-1] if interspersed_list else []", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    group_list = paren_string.split(' ')  # split by spaces to get groups\n    result = [] \n\n    for group in group_list:\n        max_depth = 0  # maximum depth of parentheses\n        current_max = 0  # current count of open parentheses\n        for paren in group:\n            if paren == '(':  \n                current_max += 1  # increment for each open parenthesis\n                if current_max > max_depth:\n                    max_depth = current_max\n            elif paren == ')':\n                if current_max > 0: \n                    current_max -= 1  # decrement for each closed parenthesis\n        result.append(max_depth)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"    \n    if numbers:\n        return (sum(numbers), reduce(operator.mul, numbers))\n    else:\n        return (0, 1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string) - 1, -1, -1):\n            if is_palindrome(string[:i+1]):\n                return string + string[i+1:][::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # checking if both strings are of equal length\n    if len(a) != len(b):\n        return \"Input strings are not of equal length\"\n\n    # using python list comprehension to perform XOR operation\n    result = [str(int(a[i]) ^ int(b[i])) for i in range(len(a))]\n    \n    # joining list elements to form a string\n    return ''.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Using a list comprehension to generate list of numbers from 0 to n\n    sequence_numbers = [str(i) for i in range(n+1)]\n\n    # Using ' '.join(list) to convert list of numbers to string with space separation\n    return ' '.join(sequence_numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # split the string into individual notes\n    notes = music_string.split()\n\n    # map each note to its beat length using the note_map and return the result\n    return [note_map[note] for note in notes]", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    Args:\n        string: Large string to be evaluated.\n        substring: Substring to be counted in the large string.\n    \n    Returns:\n        int: total number of substrings in the original string\n  \n    The examples below test the various scenarios associated with the function.\n    Examples:\n        >>> how_many_times('', 'a')\n        \n        0\n        \n        >>> how_many_times('aaa', 'a')\n        \n        3\n        \n        >>> how_many_times('aaaa', 'aa')\n        \n        3\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    words_to_numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_to_words = {v: k for k, v in words_to_numbers.items()}\n    numbers_list = numbers.split(' ')\n    numbers_list_as_int = [words_to_numbers[number] for number in numbers_list]\n    numbers_list_as_int.sort()\n    sorted_numbers = ' '.join([numbers_to_words[number] for number in numbers_list_as_int])\n    return sorted_numbers", "result": "failed: ''", "passed": false}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_difference = float('inf')\n    closest_pair = (None, None)\n\n    for i in range(len(numbers) - 1):\n        difference = numbers[i+1] - numbers[i]\n        if difference < min_difference:\n            min_difference = difference\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    numbers = [(num - min_num) / diff for num in numbers]\n    return numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if type(val) == int]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef derivative(xs: list, x: float):\n    \"\"\"\n    Computes derivative of polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([coeff * i * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # initial guess for x\n    x = 0.5\n\n    # epsilon threshold denotes how close to zero we want our function to be\n    epsilon = 1e-7\n\n    \"\"\"\n    Compute initial polynomial and derivative values.\n    If our function value is below the epsilon threshold, we can return this as a root.\n    If no root is found after 1000 iterations, we return None.\n    \"\"\"\n    for _ in range(1000):\n        px = poly(xs, x)\n        \n        if abs(px) < epsilon:\n            return x\n        \n        pdx = derivative(xs, x)\n        \n        x = x - px / pdx\n\n    return None", "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    idx_mult_of_three = [idx for idx in range(len(l)) if idx % 3 == 0]\n    vals_mult_of_three = sorted([val for idx, val in enumerate(l) if idx % 3 == 0])\n\n    for i, sorted_val in zip(idx_mult_of_three, vals_mult_of_three):\n        l[i] = sorted_val\n\n    return l", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list)->int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i%11 == 0 or i%13 == 0:\n            count += str(i).count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    # Extract even-indexed elements and sort them\n    even_indexed = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    \n    # Replace even-indexed elements in original list with sorted elements\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indexed.pop(0)\n    return l", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in the opposite way to decoding. \n    # Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(num):\n        if num <= 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(num - 1):\n                a, b = b, a + b\n            return b\n\n    prime_fibs = []\n    i = 0\n    while len(prime_fibs) < n:\n        fib_i = fib(i)\n        if is_prime(fib_i):\n            prime_fibs.append(fib_i)\n        i += 1\n\n    return prime_fibs[-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    size = len(l)\n    for i in range(0, size - 2):\n        for j in range(i + 1, size - 1):\n            for k in range(j + 1, size):\n                if (l[i] + l[j] + l[k] == 0):\n                    return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    This function takes the number of cars driving in one direction on an infinitely\n    long straight road and calculates the number of collisions that would occur when \n    an equal number of cars drive in the opposite direction at the same time and speed.\n\n    Args:\n    n (int): Number of cars in one direction.\n\n    Returns:\n    int: The number of collisions.\n\n    \"\"\"\n    return n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Create a set to store the numbers\n    numbers_set = set()\n\n    # Iterate over the list\n    for num in l:\n        # If the negative of the number is in the set, return True\n        if -num in numbers_set:\n            return True\n        # Otherwise, add the number to the set\n        numbers_set.add(num)\n\n    # If no pair is found, return False\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Create a returnable variable that contains the string representation of the converted input\n    result = ''\n    # Loop through as long as x is greater than 0\n    while x > 0:\n        # Calculate the modulus of x and base and prepend it to the result string\n        result = str(x % base) + result\n        # Update the value of x by performing integer division by the base\n        x = x // base\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    # base cases\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    # list to keep track of previous 4 values\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        # compute current fib value and append it to fib list\n        fib.append(fib[-1] + fib[-2] + fib[-3] + fib[-4])\n        # remove the least recent fib value\n        fib.pop(0)\n    return fib[-1]  # return the last fib in the list which is the answer", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    \n    if n % 2 == 0:\n        median1 = l[n//2]\n        median2 = l[n//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = l[n//2]\n    return median", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # reversing the string using slicing and comparing it with the original string\n    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(c for c in text if c.lower() not in 'aeiou')", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(list(s0)) == sorted(list(s1))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n<=0:\n        print(\"Input should be a positive integer\")\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        sequence=[0,1]\n        for i in range(2,n):\n            next_number = sequence[i-1] + sequence[i-2]\n            sequence.append(next_number)\n        return sequence[-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0 or stack.pop() != \"<\":\n                return False\n    return len(stack) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    elif all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    n = len(xs)\n    derivative = []\n\n    for i in range(1, n):\n        derivative.append(i * xs[i])\n\n    return derivative", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int, memo = {}):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n not in memo:\n        memo[n] = fibfib(n - 1, memo) + fibfib(n - 2, memo) + fibfib(n - 3, memo)\n    return memo[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s = s.lower()\n    \n    for char in s[:-1]:\n        if char in vowels:\n            count += 1\n\n    if s and s[-1] in vowels + ['y', 'Y']:\n        count += 1\n\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # should return 2\nprint(vowels_count(\"ACEDY\"))  # should return 3\nprint(vowels_count(\"VuEdIy\")) # should return 4\nprint(vowels_count(\"pythn\"))  # should return 0\nprint(vowels_count(\"Rhythm\")) # should return 1\nprint(vowels_count(\"\"))       # Empty string, should return 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert input integer to string\n    str_x = str(x)\n    # If shift > number of digits, return digits reversed.\n    if shift > len(str_x):\n        return str_x[::-1]\n    else:\n        # Shift the digits right by the required number of shifts\n        shift = shift % len(str_x)\n        return str_x[-shift:] + str_x[:-shift]", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    # split the string into words\n    words = s.split()\n    \n    # extract the number of apples and oranges\n    apples = int(words[0])\n    oranges = int(words[3])\n    \n    # calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    return mangoes", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest = float('inf')\n    index = 0\n    for i, num in enumerate(arr):\n        if num%2 == 0 and num < smallest:\n            smallest = num\n            index = i\n    return [smallest, index] if smallest != float('inf') else []", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_value = -1\n    for item in lst:\n        if item > 0 and lst.count(item) >= item and item > max_value:\n            max_value = item\n    return max_value", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0)) # Minimum\n        if lst:\n            result.append(lst.pop()) # Maximum\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    import math\n\n    # check if three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # calculate the semiperimeter\n        s = (a + b + c) / 2\n\n        # calculate the area\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n        # round to 2 decimal points\n        return round(area, 2)\n\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    sum_q = sum(q)\n    if sum_q <= w and q == q[::-1]:\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n=len(arr)\n    change_count=0\n    for i in range(n//2):\n        if arr[i]!=arr[n-1-i]:\n            change_count+=1\n    return change_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "Certainly, here is the completed function according to your specifications:\n\ndef total_match(lst1, lst2):\n    sum_lst1 = sum(len(i) for i in lst1)\n    sum_lst2 = sum(len(i) for i in lst2)\n\n    if sum_lst1 <= sum_lst2:\n        return lst1\n    else:\n        return lst2\n\nThis function will take two lists of strings (lst1, lst2) as its arguments. It calculates the total length of all strings in each list. If the length of the strings in lst1 is less than or equal to the length of the strings in lst2, it will return lst1. Otherwise, it will return lst2.", "result": "failed: invalid syntax (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n%2 == 0 or n%3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n%i == 0 or n%(i+2) == 0:\n                return False\n            i += 6\n        return True\n\n    factors = []\n    for i in range(2, 100):\n        while a % i == 0 and is_prime(i):\n            a = a / i\n            factors.append(i)\n\n        if len(factors) > 3:\n            return False\n\n    return len(factors) == 3", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"A function that returns true if a number x is a simple power of n and false in other cases.\"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x != 1:\n        if x % n != 0:\n            return False\n        x /= n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(a ** (1. / 3)) ** 3 == a", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num: str) -> int:\n    # Prime hex digits as per the question \n    hash_map = {\"2\": 1, \"3\": 1, \"5\": 1, \"7\": 1, \"B\": 1, \"D\": 1}\n    \n    return sum(hash_map.get(char, 0) for char in num)", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n        return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if number is prime.\"\"\"\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result = 2*(10**(n-1)) - 10**(n-2)\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)\n    binary = binary[2:] # ignore \"0b\" prefix\n    total_sum = sum(int(x) for x in binary)\n    return bin(total_sum)[2:] # convert to binary and ignore \"0b\" prefix", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):  # iterate over odd indices\n        if lst[i] % 2 == 0:  # check if element at index i is even\n            total += lst[i]\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = [(i, j) for i, row in enumerate(lst) for j, item in enumerate(row) if item == x]\n    return sorted(result, key=lambda k: (k[0], -k[1]))\n\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # Expected Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1)) # Expected Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3)) # Expected Output: [(2, 2)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Copy the array\n    array_copy = array.copy()\n    # If array is not empty\n    if array_copy:\n        # Calculate the sum of the 1st and last elements\n        sum_ = array_copy[0] + array_copy[-1]\n        # If sum is odd, sort in ascending order\n        if sum_ % 2 == 1:\n            array_copy.sort()\n        # else, sort in descending order\n        else:\n            array_copy.sort(reverse=True)\n    # Return the sorted copy\n    return array_copy", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = []\n    for char in s:\n        if char.isalpha():\n            shift = 2*2 if char.islower() else 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[2*2]\n            encrypted.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a')))\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if lst == []:\n        return None\n    else:\n        lst.sort()\n        for i in range(1, len(lst)):\n            if lst[i] > lst[i - 1]:\n                return lst[i]\n        return None", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # replace all punctuation markers with a common one\n    for char in \".?!\":\n        S = S.replace(char, '.')\n        \n    # split the string into sentences\n    sentences = S.split('.')\n    \n    # inititalize counter\n    boredoms = 0\n    \n    # check if the sentence begins with 'I'\n    for sentence in sentences:\n        words = sentence.split()\n        if words:\n            if words[0] == 'I':\n                boredoms += 1\n    \n    return boredoms", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    # Check if any number is equal to the sum of the other two\n    elif x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = {'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w',\n              'A':'C', 'E':'G', 'I':'K', 'O':'Q', 'U':'W'}\n    \n    encoded_msg = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_msg += vowels[char]\n            else:\n                encoded_msg += char.swapcase()\n        else:\n            encoded_msg += char\n            \n    return encoded_msg", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if integer n is a prime\"\"\"\n    # if the number is less than 2 then it is not prime\n    if n < 2:\n        return False\n    # 2 is the only even prime number\n    if n == 2: \n        return True    \n    # all other even numbers are not prime\n    if n % 2 == 0: \n        return False\n    # range starts with 3 and only needs to go up \n    # the square root of n for all odd numbers\n    max_div = round(n**0.5) + 1\n    for i in range(3, max_div, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    primes = filter(is_prime, lst)\n    largest_prime = max(primes, default=0)\n    \n    # If there is no prime number, the sum should be 0.\n    if largest_prime == 0:\n        return 0\n    \n    return sum(map(int, str(largest_prime)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n  # if dictionary is empty, return False\n  if not dict:\n    return False\n  \n  # get first key from dictionary\n  first_key = next(iter(dict))\n\n  # check if the first key is string and either all characters are in lower case or upper case\n  if isinstance(first_key, str) and (first_key.islower() or first_key.isupper()):\n    case = first_key.islower() # store the case (True if lower, False if upper)\n    \n    # iterate over all keys and check if they all are in the same case (as the first key)\n    for key in dict:\n      if not isinstance(key, str) or key.islower() != case:\n        return False\n    return True\n\n  else:\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "def is_prime(x):\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n\n    # Now check for odd factors up to the square root of x\n    i = 3\n    while i * i <= x:\n        if x % i == 0:\n            return False\n        i += 2\n\n    return True\n\ndef count_up_to(n):\n    return [x for x in range(2, n) if is_prime(x)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # obtain unit digit of 'a' and 'b'\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n  \n    # return their product\n    return unit_a * unit_b", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    upper_vowels = [1 for i in range(0, len(s), 2) if s[i] in vowels]\n    \n    return sum(upper_vowels)", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    fvalue = float(value)\n\n    if fvalue >= 0:\n        if (fvalue - int(fvalue)) >= 0.5:\n            return int(fvalue) + 1\n        else:\n            return int(fvalue)\n    else:\n        if (fvalue - int(fvalue)) <= -0.5:\n            return int(fvalue) - 1\n        else:\n            return int(fvalue)", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n + i*2 for i in range(n)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    s = s.replace(',', '')  # remove commas\n    return s.split()  # split the string into words", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Special case where x is greater than y\n    if x > y:\n        return -1\n\n    # Get the highest number in the range\n    high = max(x, y)\n\n    # Check if the highest number is even\n    if high % 2 == 0:\n        return high\n    # If the highest number is odd, and it is not equal to the lowest number, then the second highest number is even\n    elif high != min(x, y):\n        return high - 1\n    # If the highest number and the lowest number are both odd, then there is no even number in the range\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if not any(int(digit) % 2 == 0 for digit in str(num))])", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n  # the digit to word mapping\n  word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n  # keep only the numbers between 1 and 9 inclusively\n  arr = [n for n in arr if 1 <= n <= 9]\n\n  # sort the array and reverse it\n  arr.sort(reverse=True)\n\n  # replace each digit by its corresponding word\n  arr = [word[n] for n in arr]\n\n  return arr", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(m):\n        if m == 0 or m == 1:\n            return 1\n        else:\n            return m * factorial(m-1)\n\n    def sum_numbers(m):\n        return sum(range(1, m+1))\n\n    return [factorial(i) if i % 2 == 0 else sum_numbers(i) for i in range(1, n+1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(d) for d in str(abs(num))]\n        if num < 0:\n            digits[0] *= -1\n        digit_sum = sum(digits)\n        if digit_sum > 0:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    cnt = 0\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:  \n            cnt += 1\n            idex = i\n    if cnt > 1:   #more than one place where right neighbour is smaller\n        return False\n    if cnt == 0:  #array is already sorted\n        return True\n    if arr[0] >= arr[-1] and cnt == 1: #Possible to make sorted by one rotation\n        return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = len([num for num in lst1 if num % 2 != 0])\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = len([num for num in lst2 if num % 2 == 0])\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n    # it means we can exchange those odd numbers with even numbers in lst2.\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    # remove whitespace and make the string into a list of characters\n    test = test.replace(' ', '')\n    counts = {}\n    \n    # counts the occurrences of each character\n    for char in test:\n        if char not in counts:\n            counts[char] = 1\n        else:\n            counts[char] += 1\n    \n    # gets the maximum count\n    max_count = max(counts.values()) if counts else 0\n\n    # filters the dictionary to return only the characters with max count occurrences\n    return {char: count for char, count in counts.items() if count == max_count}\n\n# test cases to validate the solution\n\nassert(histogram('a b c') == {'a': 1, 'b': 1, 'c': 1})\nassert(histogram('a b b a') == {'a': 2, 'b': 2})\nassert(histogram('a b c a b') == {'a': 2, 'b': 2})\nassert(histogram('b b b b a') == {'b': 4})\nassert(histogram('') == {})", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    # delete all the characters in s that are equal to any character in c\n    result = ''.join(ch for ch in s if ch not in c)\n    # check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    # return a tuple containing the result string and True/False for the check.\n    return (result, is_palindrome)", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    output = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 == 1)\n        result = f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\"\n        output.append(result)\n    return output", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sum_sub_array = sum(nums[i:j+1])\n            min_sum = min(min_sum, sum_sub_array)\n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    # Count the total units of water in the grid\n    total = sum(sum(row) for row in grid)\n    # Calculate the number of times the bucket needs to be lowered\n    rounds = math.ceil(total / capacity)\n\n    return rounds", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    return [word for word in words if sum(1 for char in word if char in consonants) == n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    length_word = len(word)\n    \n    for i in range(length_word - 1, 1, -1):\n        if (word[i] in vowels) and (word[i - 1] not in vowels) and (word[i + 1] not in vowels):\n            return word[i]\n    return \"\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # First, sort both strings in order to arrange all '(' characters before ')'\n    lst.sort(key=lambda x: x.count(\"(\"), reverse=True)\n    \n    # Concatenate both strings\n    s = \"\".join(lst)\n    \n    balance = 0\n    \n    for ch in s:\n        if ch == \"(\":\n            balance += 1\n        else:\n            balance -= 1\n        # If balance < 0, we have an unmatched ')', so the string is not good\n        if balance < 0:\n            return \"No\"\n\n    # The string is good only if all parentheses are balanced (i.e., balance == 0)\n    return \"Yes\" if balance == 0 else \"No\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "Here's the method to come up with the sorted list of k maximum elements in arr:\n\ndef maximum(arr, k):\n    # We first sort the list in descending order.\n    arr.sort(reverse=True)\n\n    # We then get the first 'k' items of the reversed list, sort them in ascending order, and return it.\n    return sorted(arr[:k])", "result": "failed: unterminated string literal (detected at line 27) (<string>, line 27)", "passed": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([num for i, num in enumerate(lst) if num % 2 != 0 and i % 2 == 0])", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize result variable to be the sum of numbers with at most two digits\n    result = 0\n    for i in range(k): # iterate from 0 to k\n        num = arr[i]\n        if num < 100: # Check if the number has at most two digits\n            result += num  # If it is, add it to the result\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_nums_collatz = [i for i in collatz_sequence if i % 2 != 0]\n    return sorted(odd_nums_collatz)", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        date_time_obj = datetime.strptime(date, '%m-%d-%Y')\n\n        month = date_time_obj.month\n        day = date_time_obj.day\n\n        if month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31:\n            return True\n        elif month in [4, 6, 9, 11] and 1 <= day <= 30:\n            return True\n        elif month == 2 and 1 <= day <= 29:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split() # Split on whitespace\n    elif ',' in txt:\n        return txt.split(',') # Split on comma\n    else:\n        return sum(1 for c in txt.lower() if ord(c) - ord('a') % 2 == 0) # Count lower-case letters with odd order\n\n# Test cases:\n\nprint(split_words(\"Hello world!\")) # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\")) # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\")) # \u279e 3", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return lst == sorted(lst)", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):  \n            if n % i == 0: return False \n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n  \n    intersection_start, intersection_end = max(start1, start2), min(end1, end2)\n  \n    if intersection_start > intersection_end:\n        return \"NO\"\n  \n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length): \n        return \"YES\"\n  \n    return \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr: # check if the array is empty\n        return None\n\n    # function to return the sign of a number\n    def sign(num):\n        if num == 0: \n            return 0\n        if num > 0: \n            return 1\n        else: \n            return -1\n    \n    sum_magnitude = sum(abs(x) for x in arr) # sum of magnitudes of integers\n    prod_signs = 1\n    zero_checker = False\n    for num in arr:\n        if sign(num) == 0:\n            zero_checker = True\n        else:\n            prod_signs *= sign(num)\n    \n    return sum_magnitude * prod_signs if not zero_checker else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "from typing import List\nimport heapq\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    direction = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # create a lookup dictionary from cell values to their coordinates\n    lookup = {}\n    for i in range(n):\n        for j in range(n):\n            lookup[grid[i][j]] = (i, j)\n            \n    # initial priority queue\n    queue = [(grid[i][j], [lookup[grid[i][j]]]) for i in range(n) for j in range(n)]\n    heapq.heapify(queue)\n    \n    while queue:\n        curr, path = heapq.heappop(queue)\n        \n        # ignore paths longer than k\n        if len(path) > k:\n            continue\n        \n        # if we found a valid path, return it\n        if len(path) == k:\n            return [grid[x][y] for (x, y) in path]\n        \n        x, y = path[-1]\n        for dx, dy in direction:\n            nx, ny = x + dx, y + dy\n            # ignore out-of-bound and already visited cells\n            if 0 <= nx < n and 0 <= ny < n and lookup[grid[nx][ny]] not in path:\n                heapq.heappush(queue, (curr + grid[nx][ny], path + [lookup[grid[nx][ny]]]))\n    \n    return []", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        return []\n    elif n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,3,2]\n\n    sequence = [1,3,2]\n    \n    def calc_odd(n):\n        if n <= 2:\n            return sequence[n]\n        \n        if len(sequence) <= n:\n            sequence.append(calc_odd(n-1) + calc_odd(n-2) + calc_odd(n + 1))\n        return sequence[n]\n\n    def calc_even(n):\n        return 1 + n / 2\n    \n    for i in range(3, n + 1):    \n        if i % 2 == 0:\n            sequence.append(calc_even(i))\n        else:\n            calc_odd(i)\n    return sequence", "result": "failed: maximum recursion depth exceeded", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    is_odd = False\n    for digit in str(n):\n        if int(digit)%2 != 0:\n            is_odd = True\n            product *= int(digit)\n            \n    if not is_odd:\n        return 0\n    else:\n        return product", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef is_nested_brackets(s):\n    stack = []\n    for i in range(0, len(s)):\n        if s[i] == '[':\n            stack.append('[')\n        elif s[i] == ']':\n            if len(stack) == 0:\n                return False\n            last = stack.pop()\n            if s[i] == ']' and last != '[':\n                return False\n    if len(stack) != 0:\n        return False\n    return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:                # Checks if the string is empty\n        return False\n    elif txt[-1] == ' ':             # Checks if the last character is a space\n        return False\n    elif txt[-1].isalpha():          # Checks if the last character is an alphabetical letter\n        if len(txt) == 1:            # Checks if the string has only one character\n            return True\n        elif txt[-2] == ' ':         # Checks if the second last character is a space\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            index = i\n    return index", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = max([i for i in lst if i < 0], default=None)\n    smallest_positive = min([i for i in lst if i > 0], default=None)\n    return largest_negative, smallest_positive", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    # replace comma with dot in strings to make them properly formatted floats\n    a1 = float(str(a).replace(\",\", \".\")) if isinstance(a, str) else float(a)\n    b1 = float(str(b).replace(\",\", \".\")) if isinstance(b, str) else float(b)\n\n    # We return None if the values are equal\n    if a1 == b1:\n        return None\n        \n    # return bigger number in initial variable type\n    return a if a1 > b1 else b", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n >= 8 and n % 2 == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = re.sub(' {3,}', '-', text)   # Replace 3 or more consecutive spaces with '-'\n    text = re.sub(' ', '_', text)       # Replace remaining spaces with '_'\n\n    return text", "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Split the file_name into name and extention\n    name_extension = file_name.split('.')\n    \n    # When not exactly one dot in the file name\n    if len(name_extension) != 2:\n        return 'No'\n    \n    name, extension = name_extension\n    \n    # When before the dot empty or not starting with a latin alphapet letter\n    if len(name) == 0 or not name[0].isalpha():\n        return 'No'\n        \n    # When extention is not 'txt', 'exe', 'dll'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # When more than three digits in the file name\n    sum_of_digits = sum(c.isdigit() for c in file_name)\n    if sum_of_digits > 3:\n        return 'No'\n    \n    return 'Yes'", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    # Calculate the simplified value of x * n\n    simplified_value = (x_numerator * n_numerator) / (x_denominator * n_denominator)\n    return simplified_value.is_integer()", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    This version treats negative integers as their absolute values when calculating the sum of their digits.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        \"\"\"Calculate the sum of digits in a number\"\"\"\n        return sum(int(x) for x in str(abs(n)))\n        \n    return sorted(nums, key=digit_sum)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:  # Check if number is greater than 10\n            str_num = str(num)\n            # Check if first and last digits are odd\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Creating the array a\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    # Count the elements which are 0, 1 and 2 modular 3\n    counts = [0, 0, 0]\n    for num in a:\n        counts[num % 3] += 1\n    # Number of triples where the sum is a multiple of 3 can be calculated by choosing\n    # 3 from the elements which are 0 mod 3 and adding it to the ways of choosing 1 from each category.\n    return counts[0]*(counts[0]-1)*(counts[0]-2)//6 + counts[0]*counts[1]*counts[2]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = {\"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"Mars\": 4, \"Jupiter\": 5, \"Saturn\": 6, \"Uranus\": 7, \"Neptune\": 8}\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        first, second = sorted((planets[planet1], planets[planet2]))\n        return tuple(planet for planet, position in planets.items() if first < position < second)", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Deletes the strings that have odd lengths\n    lst = [i for i in lst if len(i) % 2 == 0]\n\n    # Sorts the list by length and then alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n\n    return lst", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    # Filter the list using list comprehension for only positive odd integers \n    filtered_list = [number for number in lst if number >= 0 and number % 2 == 1]\n\n    # Calculate the sum of squares of the numbers in the filtered_list\n    sum_of_squares = sum(number**2 for number in filtered_list)\n\n    # Return the calculated sum\n    return sum_of_squares", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"Compares the game scores to the guesses\"\"\"\n    # Use list comprehension to generate the result list\n    return [abs(a - b) for a, b in zip(game, guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_ext = \"\"\n\n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n            \n    return f'{class_name}.{strongest_ext}'", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Generate all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check each rotation to see if it's a substring of a\n    for r in rotations:\n        if r in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count, odd_count = 0, 0\n    digits = abs(num) # Make negative numbers positive\n    for digit in str(digits):\n      if int(digit) % 2 == 0:\n        even_count += 1\n      else:\n        odd_count += 1\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(num):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    values = [1000, 900, 500, 400,\n              100, 90, 50, 40,\n              10, 9, 5, 4,\n              1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\",\n                \"c\", \"xc\", \"l\", \"xl\",\n                \"x\", \"ix\", \"v\", \"iv\",\n                \"i\"]\n    roman = \"\"\n    for i in range(len(values)):\n        count = int(num / values[i])\n        roman += numerals[i] * count\n        num -= values[i] * count\n    return roman", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sorting the inputs so that 'c' is the largest side (hypotenuse)\n    sides = sorted([a, b, c])\n    # Using Pythagoras' theorem to check if right triangle\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_len = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_len:\n            max_len = unique_chars\n            max_word = word\n        elif unique_chars == max_len:\n            max_word = min(max_word, word)\n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining >= need:\n        now_eaten = need\n        number += now_eaten\n        remaining -= now_eaten\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    # Combine the operators and operands into a single expression\n    expression = ''.join([str(operand[i]) + operator[i] for i in range(len(operator))] + [str(operand[-1])])\n    # Use eval to evaluate the expression\n    return eval(expression)", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not s.isalpha() and not s.isnumeric():\n        return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper() else i.upper() for i in s])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n\n    return hashlib.md5(text.encode()).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Make sure low and high are in the correct order\n    low, high = sorted((a, b))\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the range from low to high\n    for i in range(low, high + 1):\n        # If the number is between 0 and 9 (inclusive) and is even, append to the result list\n        if 0 <= i <= 9 and i % 2 == 0:\n            result.append(i)\n\n    return result", "result": "passed", "passed": true}
